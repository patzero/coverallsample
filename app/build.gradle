plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'jacoco'
    id("com.github.nbaztec.coveralls-jacoco") version "1.2.13"
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.coverallsample"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task testCoverage(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination file("${buildDir}/reports/codecoverage")
    }

//    def ignoredFilter = [
//            '**/R.class',
//            '**/R$*.class',
//            '**/BuildConfig.*',
//            '**/Manifest*.*',
//            'android/**/*.*',
//            'com.android/**/*.*',
//            'com.google/**/*.*',
//            '**/ApplicationModule_ProvideApplicationFactory.class',
//            '**/*Module_Provide*Factory.class',
//            '**/Dagger*Component*.class',
//            '**/*_MembersInjector*.class',
//            '**/*_Factory*.class'
//    ]
//    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/debug/",
//            excludes: ignoredFilter)
//
//    getSourceDirectories().setFrom(files(android.sourceSets.main.java.srcDirs))
//    getClassDirectories().setFrom(files([debugTree]))
//    getAdditionalSourceDirs().setFrom(files([
//            "${buildDir}/generated/source/buildConfig/debug",
//            "${buildDir}/generated/source/r/debug"
//    ]))
//    def projectFiles = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec']).files
//    def buildFiles = fileTree(dir: "$buildDir",
//            includes: ["jacoco/testDebugUnitTest.exec", "outputs/code-coverage/connected/*coverage.ec"
//            ]).files
//    executionData.setFrom(projectFiles + buildFiles)

    coverallsJacoco {
        reportPath = "${buildDir}/reports/jacoco/testCoverage/testCoverage.xml"
//        reportPath = "" // default: "build/reports/jacoco/test/jacocoTestReport.xml"
    }

    tasks.coverallsJacoco.dependsOn(it)
}

task jacocoReport(type: JacocoReport, dependsOn: 'test') {

    // Define what type of report we should generate
    // If we don't want to process the data further, html should be enough
    reports {
        xml.enabled = true
        html.enabled = true
    }

    // Setup the .class, source, and execution directories
    final fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*']

    sourceDirectories.setFrom files(["${project.projectDir}/src/main/java"])
    classDirectories.setFrom files([
            fileTree(dir: "${project.buildDir}/classes", excludes: fileFilter),
            fileTree(dir: "${project.buildDir}/intermediates/javac/debug", excludes: fileFilter),
            fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter),
    ])
    executionData.setFrom fileTree(dir: project.buildDir, includes: [
            'jacoco/*.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])

    coverallsJacoco {
        reportPath = "${buildDir}/reports/jacoco/jacocoReport/jacocoReport.xml"
//        reportPath = "" // default: "build/reports/jacoco/test/jacocoTestReport.xml"
    }

    tasks.coverallsJacoco.dependsOn(it)
}


